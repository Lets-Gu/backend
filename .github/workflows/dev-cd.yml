name: CD with Docker

on:
  workflow_run:
    workflows: [ "Java CI with Gradle" ]
    types: [ completed ]
    branches: [ "dev" ]

permissions:
  contents: read
  packages: write

jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'dev' }}
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      # 1) 소스 코드와 서브모듈을 내려받아 src/, module/, Dockerfile 등이 워크스페이스에 존재하도록 합니다.
      - name: Checkout source and submodules
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      # 2) CI에서 업로드한 JAR (build/libs/*.jar) 과 Dockerfile 을 워크스페이스에 추가로 가져옵니다.
      - name: Download artifact (jar only)
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          name: build-libs

      # 3) 멀티플랫폼 도커 빌드를 위한 Buildx 환경 설정
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: |
            network=host

      # 4) GHCR 로그인 (이미지 푸시 준비)
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ACTION_TOKEN }}

      # 5) 이미지 태그·레이블 생성 (커밋 SHA 기반)
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha

      # 6) Docker 이미지 빌드 & GHCR 푸시
      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: [self-hosted]
    steps:
      # 7) 서버(EC2 등 self-hosted runner)에서 GHCR 로그인
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ACTION_TOKEN }}

      # 8) 최신 이미지 다운로드
      - name: Pull latest image
        run: docker pull ${{ needs.build.outputs.image-tag }}

      # 9) 이전 컨테이너 종료 및 불필요한 이미지 정리
      - name: Clean up old container and image
        run: |
          docker rm -f ${{ vars.CONTAINER_NAME }} || true
          docker images "ghcr.io/${{ github.repository }}" \
            --format "{{.Repository}}:{{.Tag}}" \
            | grep -v "${{ needs.build.outputs.image-tag }}" \
            | xargs -r docker rmi -f || true

      # 10) 새 이미지를 기반으로 컨테이너 실행
      - name: Run New Container
        run: |
          docker run -d \
            --name ${{ vars.CONTAINER_NAME }} \
            --network ${{ vars.NETWORK_NAME }} \
            -p ${{ secrets.DEV_WEB_PORT }}:8080 \
            -e USE_PROFILE=dev \
            -e TZ=Asia/Seoul \
            ${{ needs.build.outputs.image-tag }}
